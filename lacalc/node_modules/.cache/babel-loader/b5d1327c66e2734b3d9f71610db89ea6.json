{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/lafe/lacalc/src/App.js\";\nimport React from 'react';\nimport convert from 'convert-units';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid'; //import Selector from './components/Selectors';\n\nimport InputField from './components/InputField';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.generateMainSelector = () => {\n      return convert().measures().map(ele => ele[0].toUpperCase() + ele.slice(1));\n    };\n\n    this.handleMainSelector = event => {\n      event.preventDefault();\n      this.setState({\n        distance: 0,\n        gas: 0\n      });\n    };\n\n    this.handleSelector = event => {\n      this.setState({\n        [event.target.name]: event.target.value,\n        firstInput: 0,\n        secondInput: 0\n      });\n    };\n\n    this.handleInputFields = event => {\n      event.preventDefault();\n\n      if (event.target.name === 'firstInput') {\n        this.setState({\n          firstInput: event.target.value,\n          flow: 'L2R'\n        }, () => this.handleConversion());\n      } else if (event.target.name === 'secondInput') {\n        this.setState({\n          secondInput: event.target.value,\n          flow: 'R2L'\n        }, () => this.handleConversion());\n      }\n    };\n\n    this.handleConversion = () => {\n      if (this.state.flow === 'L2R') {\n        this.setState({\n          secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\n        });\n      } else if (this.state.flow === 'R2L') {\n        this.setState({\n          firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\n        });\n      }\n    };\n\n    this.state = {\n      mainSelector: '',\n      firstQuantity: '',\n      secondQuantity: '',\n      firstInput: 0,\n      secondInput: 0,\n      flow: ''\n    };\n  }\n\n  render() {\n    console.log(convert().possibilities());\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      align: \"center\",\n      spacing: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      data: {\n        currentValue: 5,\n        input: this.state.firstQuantity,\n        label: this.state.firstLabel,\n        name: 'miles'\n      },\n      handleInput: this.handleInputFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(InputField, {\n      data: {\n        currentValue: 7,\n        input: this.state.secondQuantity,\n        label: this.state.secondLabel,\n        name: 'gallons'\n      },\n      handleInput: this.handleInputFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/usr/src/app/lafe/lacalc/src/App.js"],"names":["React","convert","Container","Grid","InputField","App","Component","constructor","generateMainSelector","measures","map","ele","toUpperCase","slice","handleMainSelector","event","preventDefault","setState","distance","gas","handleSelector","target","name","value","firstInput","secondInput","handleInputFields","flow","handleConversion","state","from","firstQuantity","to","secondQuantity","mainSelector","render","console","log","possibilities","currentValue","input","label","firstLabel","secondLabel"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport convert from 'convert-units';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\n//import Selector from './components/Selectors';\nimport InputField from './components/InputField';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            mainSelector: '',\n            firstQuantity: '',\n            secondQuantity: '',\n            firstInput: 0,\n            secondInput: 0,\n            flow: ''\n        }\n    }\n\n    generateMainSelector = () => {\n        return (\n            convert().measures()\n                .map(ele => ele[0].toUpperCase() + ele.slice(1))\n        )\n    }\n\n    handleMainSelector = event => {\n        event.preventDefault();\n        this.setState({\n            distance: 0,\n            gas:0\n        })\n    }\n\n    handleSelector = event => {\n        this.setState({[event.target.name]: event.target.value, firstInput: 0, secondInput: 0})\n    }\n\n    handleInputFields = event => {\n        event.preventDefault();\n        if(event.target.name === 'firstInput') {\n            this.setState({\n                firstInput: event.target.value,\n                flow: 'L2R'\n            },\n            () => this.handleConversion())\n        }\n        else if(event.target.name === 'secondInput') {\n            this.setState({\n                secondInput: event.target.value,\n                flow: 'R2L'\n            },\n            () => this.handleConversion())\n        }\n    }\n\n    handleConversion = () => {\n        if(this.state.flow === 'L2R') {\n            this.setState({\n                secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\n            })\n        }\n        else if(this.state.flow === 'R2L') {\n            this.setState({\n                firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\n            })\n        }\n    }\n\n    render() {\n        console.log(convert().possibilities())\n        return (\n            <Container>\n                <Grid container justify='center' align='center' spacing={3}>\n                    <InputField data={{ currentValue: 5, \n                                        input: this.state.firstQuantity, \n                                        label: this.state.firstLabel,\n                                        name: 'miles' }} \n                                handleInput={this.handleInputFields} />\n                    <InputField data={{ currentValue: 7, \n                                        input: this.state.secondQuantity, \n                                        label: this.state.secondLabel,\n                                        name: 'gallons' }} \n                                handleInput={this.handleInputFields} />\n                </Grid>\n            </Container>\n        )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}