{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/lafe/lacalc/src/App.js\";\nimport React from 'react';\nimport convert from 'convert-units';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport Add from '@material-ui/icons/Add'; //import Selector from './components/Selectors';\n\nimport InputField from './components/InputField';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.generateMainSelector = () => {\n      return convert().measures().map(ele => ele[0].toUpperCase() + ele.slice(1));\n    };\n\n    this.handleMainSelector = event => {\n      event.preventDefault();\n      this.setState({\n        distance: 0,\n        gas: 0\n      });\n    };\n\n    this.handleSelector = event => {\n      this.setState({\n        [event.target.name]: event.target.value,\n        firstInput: 0,\n        secondInput: 0\n      });\n    };\n\n    this.handleInputFields = event => {\n      event.preventDefault();\n\n      if (event.target.name === 'firstInput') {\n        this.setState({\n          firstInput: event.target.value,\n          flow: 'L2R'\n        }, () => this.handleConversion());\n      } else if (event.target.name === 'secondInput') {\n        this.setState({\n          secondInput: event.target.value,\n          flow: 'R2L'\n        }, () => this.handleConversion());\n      }\n    };\n\n    this.handleConversion = () => {\n      if (this.state.flow === 'L2R') {\n        this.setState({\n          secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\n        });\n      } else if (this.state.flow === 'R2L') {\n        this.setState({\n          firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\n        });\n      }\n    };\n\n    this.state = {\n      distance: 0,\n      gas: 0\n    };\n  }\n\n  render() {\n    console.log(convert().possibilities());\n    return React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      align: \"center\",\n      spacing: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      data: {\n        input: this.state.firstQuantity,\n        label: \"Distance\",\n        type: \"number\",\n        name: 'miles'\n      },\n      handleInput: this.handleInputFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Fab, {\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(InputField, {\n      data: {\n        input: this.state.secondQuantity,\n        label: \"Gasolene\",\n        type: \"number\",\n        name: 'gallons'\n      },\n      handleInput: this.handleInputFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/usr/src/app/lafe/lacalc/src/App.js"],"names":["React","convert","Container","Grid","Fab","Add","InputField","App","Component","constructor","generateMainSelector","measures","map","ele","toUpperCase","slice","handleMainSelector","event","preventDefault","setState","distance","gas","handleSelector","target","name","value","firstInput","secondInput","handleInputFields","flow","handleConversion","state","from","firstQuantity","to","secondQuantity","render","console","log","possibilities","input","label","type"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport convert from 'convert-units';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport Add from '@material-ui/icons/Add';\n//import Selector from './components/Selectors';\nimport InputField from './components/InputField';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            distance: 0,\n            gas: 0\n        }\n    }\n\n    generateMainSelector = () => {\n        return (\n            convert().measures()\n                .map(ele => ele[0].toUpperCase() + ele.slice(1))\n        )\n    }\n\n    handleMainSelector = event => {\n        event.preventDefault();\n        this.setState({\n            distance: 0,\n            gas:0\n        })\n    }\n\n    handleSelector = event => {\n        this.setState({[event.target.name]: event.target.value, firstInput: 0, secondInput: 0})\n    }\n\n    handleInputFields = event => {\n        event.preventDefault();\n        if(event.target.name === 'firstInput') {\n            this.setState({\n                firstInput: event.target.value,\n                flow: 'L2R'\n            },\n            () => this.handleConversion())\n        }\n        else if(event.target.name === 'secondInput') {\n            this.setState({\n                secondInput: event.target.value,\n                flow: 'R2L'\n            },\n            () => this.handleConversion())\n        }\n    }\n\n    handleConversion = () => {\n        if(this.state.flow === 'L2R') {\n            this.setState({\n                secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\n            })\n        }\n        else if(this.state.flow === 'R2L') {\n            this.setState({\n                firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\n            })\n        }\n    }\n\n    render() {\n        console.log(convert().possibilities())\n        return (\n                <Grid container justify='center' align='center' spacing={3}>\n                    <InputField data={{  \n                                        input: this.state.firstQuantity, \n                                        label: \"Distance\",\n                                        type: \"number\",\n                                        name: 'miles' }} \n                                handleInput={this.handleInputFields} />\n                    <Fab color=\"primary\" aria-label=\"add\" >\n  <AddIcon />\n</Fab>\n                    <InputField data={{  \n                                        input: this.state.secondQuantity, \n                                        label: \"Gasolene\",\n                                        type: \"number\",\n                                        name: 'gallons' }} \n                                handleInput={this.handleInputFields} />\n                </Grid>\n        )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}