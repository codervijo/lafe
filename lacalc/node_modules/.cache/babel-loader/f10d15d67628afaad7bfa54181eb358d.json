{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/lafe/lacalc/src/App.js\";\nimport React from 'react';\nimport convert from 'convert-units';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Selector from './components/Selectors';\nimport InputField from './components/InputField';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.generateMainSelector = () => {\n      return convert().measures().map(ele => ele[0].toUpperCase() + ele.slice(1));\n    };\n\n    this.handleMainSelector = event => {\n      event.preventDefault();\n      this.setState({\n        mainSelector: event.target.value,\n        firstQuantity: '',\n        secondQuantity: '',\n        firstInput: 0,\n        secondInput: 0\n      });\n    };\n\n    this.handleSelector = event => {\n      this.setState({\n        [event.target.name]: event.target.value,\n        firstInput: 0,\n        secondInput: 0\n      });\n    };\n\n    this.handleInputFields = event => {\n      event.preventDefault();\n\n      if (event.target.name === 'firstInput') {\n        this.setState({\n          firstInput: event.target.value,\n          flow: 'L2R'\n        }, () => this.handleConversion());\n      } else if (event.target.name === 'secondInput') {\n        this.setState({\n          secondInput: event.target.value,\n          flow: 'R2L'\n        }, () => this.handleConversion());\n      }\n    };\n\n    this.handleConversion = () => {\n      if (this.state.flow === 'L2R') {\n        this.setState({\n          secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\n        });\n      } else if (this.state.flow === 'R2L') {\n        this.setState({\n          firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\n        });\n      }\n    };\n\n    this.state = {\n      mainSelector: '',\n      firstQuantity: '',\n      secondQuantity: '',\n      firstInput: 0,\n      secondInput: 0,\n      flow: ''\n    };\n  }\n\n  render() {\n    console.log(convert().possibilities());\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      align: \"center\",\n      spacing: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Selector, {\n      data: {\n        size: 12,\n        label: 'Measurement',\n        measurements: convert().measures(),\n        populateType: 'mainSelector',\n        populateWith: this.generateMainSelector(),\n        selectedValue: this.state.mainSelector\n      },\n      handleSelector: this.handleMainSelector,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), this.state.mainSelector ? React.createElement(React.Fragment, null, React.createElement(Selector, {\n      data: {\n        size: 6,\n        label: 'Quantity',\n        populateType: 'firstQuantity',\n        populateWith: convert().list(this.state.mainSelector),\n        selectedValue: this.state.firstQuantity\n      },\n      handleSelector: this.handleSelector,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Selector, {\n      data: {\n        size: 6,\n        label: 'Quantity',\n        populateType: 'secondQuantity',\n        populateWith: convert().list(this.state.mainSelector),\n        selectedValue: this.state.secondQuantity\n      },\n      handleSelector: this.handleSelector,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, null), this.state.firstQuantity && this.state.secondQuantity ? React.createElement(React.Fragment, null, React.createElement(InputField, {\n      data: {\n        currentValue: this.state.firstInput,\n        input: this.state.firstQuantity,\n        label: this.state.firstLabel,\n        name: 'firstInput'\n      },\n      handleInput: this.handleInputFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(InputField, {\n      data: {\n        currentValue: this.state.secondInput,\n        input: this.state.secondQuantity,\n        label: this.state.secondLabel,\n        name: 'secondInput'\n      },\n      handleInput: this.handleInputFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, null)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/usr/src/app/lafe/lacalc/src/App.js"],"names":["React","convert","Container","Grid","Selector","InputField","App","Component","constructor","generateMainSelector","measures","map","ele","toUpperCase","slice","handleMainSelector","event","preventDefault","setState","mainSelector","target","value","firstQuantity","secondQuantity","firstInput","secondInput","handleSelector","name","handleInputFields","flow","handleConversion","state","from","to","render","console","log","possibilities","size","label","measurements","populateType","populateWith","selectedValue","list","currentValue","input","firstLabel","secondLabel"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport convert from 'convert-units';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nimport Selector from './components/Selectors';\nimport InputField from './components/InputField';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            mainSelector: '',\n            firstQuantity: '',\n            secondQuantity: '',\n            firstInput: 0,\n            secondInput: 0,\n            flow: ''\n        }\n    }\n\n    generateMainSelector = () => {\n        return (\n            convert().measures()\n                .map(ele => ele[0].toUpperCase() + ele.slice(1))\n        )\n    }\n\n    handleMainSelector = event => {\n        event.preventDefault();\n        this.setState({\n            mainSelector: event.target.value,\n            firstQuantity: '',\n            secondQuantity: '',\n            firstInput: 0,\n            secondInput: 0\n        })\n    }\n\n    handleSelector = event => {\n        this.setState({[event.target.name]: event.target.value, firstInput: 0, secondInput: 0})\n    }\n\n    handleInputFields = event => {\n        event.preventDefault();\n        if(event.target.name === 'firstInput') {\n            this.setState({\n                firstInput: event.target.value,\n                flow: 'L2R'\n            },\n            () => this.handleConversion())\n        }\n        else if(event.target.name === 'secondInput') {\n            this.setState({\n                secondInput: event.target.value,\n                flow: 'R2L'\n            },\n            () => this.handleConversion())\n        }\n    }\n\n    handleConversion = () => {\n        if(this.state.flow === 'L2R') {\n            this.setState({\n                secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\n            })\n        }\n        else if(this.state.flow === 'R2L') {\n            this.setState({\n                firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\n            })\n        }\n    }\n\n    render() {\n        console.log(convert().possibilities())\n        return (\n            <Container>\n                <Grid container justify='center' align='center' spacing={3}>\n                    <Selector data={{ size: 12,\n                                      label: 'Measurement',\n                                      measurements: convert().measures(),\n                                      populateType: 'mainSelector',\n                                      populateWith: this.generateMainSelector(),\n                                      selectedValue: this.state.mainSelector }}\n                              handleSelector={this.handleMainSelector} />\n                    {\n                        this.state.mainSelector ? (\n                            <>\n                                <Selector data={{ size: 6, \n                                                  label: 'Quantity',\n                                                  populateType: 'firstQuantity',\n                                                  populateWith: convert().list(this.state.mainSelector),\n                                                  selectedValue: this.state.firstQuantity }} \n                                          handleSelector={this.handleSelector} />\n                                <Selector data={{ size: 6, \n                                                  label: 'Quantity',\n                                                  populateType: 'secondQuantity',\n                                                  populateWith: convert().list(this.state.mainSelector),\n                                                  selectedValue: this.state.secondQuantity }} \n                                          handleSelector={this.handleSelector} />\n                            </>\n                        ) :(<></>)\n                    }\n                    {\n                        this.state.firstQuantity && this.state.secondQuantity ? (\n                            <>\n                                <InputField data={{ currentValue: this.state.firstInput, input: this.state.firstQuantity, label: this.state.firstLabel, name: 'firstInput' }} handleInput={this.handleInputFields} />\n                                <InputField data={{ currentValue: this.state.secondInput, input: this.state.secondQuantity, label: this.state.secondLabel, name: 'secondInput' }} handleInput={this.handleInputFields} />\n                            </>\n                        ) : (<></>)\n                    }\n                </Grid>\n            </Container>\n        )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}